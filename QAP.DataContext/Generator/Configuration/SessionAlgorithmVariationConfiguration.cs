// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace QAP.DataContext
{
    // SessionAlgorithmVariation
    public class SessionAlgorithmVariationConfiguration : IEntityTypeConfiguration<SessionAlgorithmVariation>
    {
        public void Configure(EntityTypeBuilder<SessionAlgorithmVariation> builder)
        {
            builder.ToTable("SessionAlgorithmVariation", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_SessionAlgorithmVariationId");

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.AlgorithmVariationId).HasColumnName(@"AlgorithmVariationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ConfigurationId).HasColumnName(@"ConfigurationId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Seed).HasColumnName(@"Seed").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PermutationId).HasColumnName(@"PermutationId").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AlgorithmVariation).WithMany(b => b.SessionAlgorithmVariations).HasForeignKey(c => c.AlgorithmVariationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SessionAlgorithmVariation_AlgorithmVariation");
            builder.HasOne(a => a.Configuration).WithMany(b => b.SessionAlgorithmVariations).HasForeignKey(c => c.ConfigurationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SessionAlgorithmVariation_Configuration");
            builder.HasOne(a => a.const_State).WithMany(b => b.SessionAlgorithmVariations).HasForeignKey(c => c.StateId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SessionAlgorithmVariation_State");
            builder.HasOne(a => a.Permutation).WithMany(b => b.SessionAlgorithmVariations).HasForeignKey(c => c.PermutationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SessionAlgorithmVariation_Permutation");
            builder.HasOne(a => a.Session).WithMany(b => b.SessionAlgorithmVariations).HasForeignKey(c => c.SessionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SessionAlgorithmVariation_Session");
        }
    }

}
// </auto-generated>
