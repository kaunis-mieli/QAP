// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace QAP.DataContext
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AlgorithmVersion
    public class AlgorithmVersionConfiguration : IEntityTypeConfiguration<AlgorithmVersion>
    {
        public void Configure(EntityTypeBuilder<AlgorithmVersion> builder)
        {
            builder.ToTable("AlgorithmVersion", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AlgorithmVersionId");

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsRequired();
            builder.Property(x => x.AlgorithmId).HasColumnName(@"AlgorithmId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Alias).HasColumnName(@"Alias").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.DefaultConfiguration).HasColumnName(@"DefaultConfiguration").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.auth_User).WithMany(b => b.AlgorithmVersions).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AlgorithmVersion_User");
            builder.HasOne(a => a.const_Algorithm).WithMany(b => b.AlgorithmVersions).HasForeignKey(c => c.AlgorithmId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AlgorithmVersion_Algorithm");

            builder.HasIndex(x => new { x.AlgorithmId, x.Version, x.Alias }).HasDatabaseName("UQ_AlgorithmVersionAlgorithmIdVersionAlias").IsUnique();
        }
    }

}
// </auto-generated>
