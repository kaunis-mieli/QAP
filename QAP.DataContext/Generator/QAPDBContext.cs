// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace QAP.DataContext
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class QAPDBContext : DbContext, IQAPDBContext
    {
        public QAPDBContext()
        {
        }

        public QAPDBContext(DbContextOptions<QAPDBContext> options)
            : base(options)
        {
        }

        public DbSet<const_Algorithm> const_Algorithms { get; set; } // Algorithm
        public DbSet<Problem> Problems { get; set; } // Problem
        public DbSet<Session> Sessions { get; set; } // Session
        public DbSet<SessionAlgorithm> SessionAlgorithms { get; set; } // SessionAlgorithm
        public DbSet<Solution> Solutions { get; set; } // Solution

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Server=.;Database=QAP;Trusted_Connection=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new const_AlgorithmConfiguration());
            modelBuilder.ApplyConfiguration(new ProblemConfiguration());
            modelBuilder.ApplyConfiguration(new SessionConfiguration());
            modelBuilder.ApplyConfiguration(new SessionAlgorithmConfiguration());
            modelBuilder.ApplyConfiguration(new SolutionConfiguration());
        }

    }
}
// </auto-generated>
